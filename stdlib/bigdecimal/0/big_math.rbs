module BigMath
  # Computes the value of e (the base of natural logarithms) raised to the power
  # of `decimal`, to the specified number of digits of precision.
  #
  # If `decimal` is infinity, returns Infinity.
  #
  # If `decimal` is NaN, returns NaN.
  #
  # <!--
  #     BigMath.exp(decimal, numeric)    -> BigDecimal
  # -->
  def self.exp: (BigDecimal, Numeric prec) -> BigDecimal

  # Computes the natural logarithm of `decimal` to the specified number of digits
  # of precision, `numeric`.
  #
  # If `decimal` is zero or negative, raises Math::DomainError.
  #
  # If `decimal` is positive infinity, returns Infinity.
  #
  # If `decimal` is NaN, returns NaN.
  #
  # <!--
  #     BigMath.log(decimal, numeric)    -> BigDecimal
  # -->
  def self.log: (BigDecimal, Numeric prec) -> BigDecimal

  # Instance methods follow.
  private

  # Computes the value of e (the base of natural logarithms) raised to the power
  # of `decimal`, to the specified number of digits of precision.
  #
  # If `decimal` is infinity, returns Infinity.
  #
  # If `decimal` is NaN, returns NaN.
  #
  # <!--
  #     BigMath.exp(decimal, numeric)    -> BigDecimal
  # -->
  def exp: (BigDecimal, Numeric prec) -> BigDecimal

  # Computes the natural logarithm of `decimal` to the specified number of digits
  # of precision, `numeric`.
  #
  # If `decimal` is zero or negative, raises Math::DomainError.
  #
  # If `decimal` is positive infinity, returns Infinity.
  #
  # If `decimal` is NaN, returns NaN.
  #
  # <!--
  #     BigMath.log(decimal, numeric)    -> BigDecimal
  # -->
  def log: (BigDecimal, Numeric prec) -> BigDecimal
end
